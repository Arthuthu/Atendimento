@page "/login"
@inject IUserService userService;
@inject IAuthService authService;
@inject NavigationManager navManager;

<EditForm Model="AuthUser" OnValidSubmit="AuthenticateUser" FormName="LoginForm" class="form-div">
    <div class="form-label">Entrar</div>
    <div style="margin-bottom: 20px;">
        <div style="font-size: 1.2rem;">
            <label>Usuario</label>
        </div>
        <div>
            <InputText @bind-Value="AuthUser.Username" class="form-input" />
        </div>
    </div>
    <div>
        <div style="font-size: 1.2rem;">
            <label>Senha</label>
        </div>
        <div>
            <InputText @bind-Value="AuthUser.Password" class="form-input" />
        </div>
    </div>
    <div style="text-align: center; margin: 10px 0;">
        <button class="primary-button">Entrar</button>
    </div>
    <div style="text-align: center; font-size: 1.2rem;">Não possui uma conta? Registre-se</div>
    <div style="text-align: center; margin-top: 15px;">
        <a class="primary-button" href="/registrar">Registrar-se</a>
    </div>
</EditForm>

@if (SendRequest)
{
    @if (AuthenticatedUser is null)
    {
        <div class="segoe-ui-padrao" style="text-align: center; margin-top: 20px; color: red; font-size: 2rem">
            Usuário ou senha incorretos
        </div>
    }
}

@code {
    AuthModel AuthUser { get; set; } = new();
    AuthenticatedUserModel? AuthenticatedUser;

    private bool SendRequest = false;

    private async Task AuthenticateUser()
    {
        AuthenticatedUser = await authService.Login(AuthUser);
        SendRequest = true;

        if (AuthenticatedUser is not null)
        {
            navManager.NavigateTo("/");
        }
    }
}
