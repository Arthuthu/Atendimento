@page "/registrar"

@using AtendimentoBlazor.Abstractions.Services
@using AtendimentoBlazor.Entities

@inject IUserService userService;
@inject NavigationManager navManager;

<EditForm Model="User" OnSubmit="AddUser" FormName="RegisterForm" class="form-div">
    <div class="form-label">Registrar</div>
    <div style="margin-bottom: 20px;">
        <div style="font-size: 1.2rem;">
            <label>Usuario</label> 
        </div>
        <div>
            <InputText @bind-Value="User.Username" class="form-input" />
        </div>
    </div>
    <div style="margin-bottom: 20px;">
        <div style="font-size: 1.2rem;">
            <label>Email</label>
        </div>
        <div>
            <InputText @bind-Value="User.Email" class="form-input" />
        </div>
    </div>
    <div>
        <div style="font-size: 1.2rem;">
            <label>Senha</label>
        </div>
        <div>
            <InputText type="password" @bind-Value="User.Password" class="form-input" />
        </div>
    </div>
    <div style="text-align: center; margin-top: 15px;">
        <button type="submit" class="primary-button">Enviar</button>
    </div>
</EditForm>

@if (Enviado)
{
    @if (Resultado is null)
    {
        <div class="form-mensagem-sucesso">Usuario registrado com sucesso</div>
    }
    else
    {
        <div class="form-mensagme-erro">@Resultado</div>
    }
}

@code {
    [SupplyParameterFromForm]
    UserModel User { get; set; } = new();
    string? Resultado { get; set; }
    bool Enviado { get; set; } = false;

    private async Task AddUser()
    {
        Resultado = await userService.Add(User);
        Enviado = true;

        if (Resultado is null)
        {
            navManager.NavigateTo("/registroconcluido");
        }
    }
}
