@page "/mygroups"
@inject IGroupService groupService
@inject IAuthService authService

<AuthorizeView>
    <Authorized>
        @if (GroupsList is not null && GroupsList.Count > 0)
        {
            <div class="page-div">
                <div class="column-div">
                    <div class="column-header">Meus Grupos</div>
                </div>
                <div style="display: flex; justify-content: center; flex-direction: column;">
                    @foreach (var group in GroupsList)
                    {
                        <div class="row-cell">
                            <a class="column-cell" href="/group/@group.Id">@group.Name</a>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="segoe-ui-padrao" style="margin: 20px 0; text-align: center; font-size: 1.5rem;">
                Não foi encontrado nenhum grupo
            </div>
        }
        <div style="text-align: center; margin: 40px;">
            <a href="/group/criar" class="primary-button">Criar Grupo</a>
        </div>
        <div style="text-align: center; margin: 40px;">
            <a href="/" class="primary-button">Voltar</a>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    List<GroupModel>? GroupsList { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetUserGroups();
        await base.OnInitializedAsync();
    }

    private async Task GetUserGroups()
    {
        string? userId = authService.GetTokenClaimValue(TokenClaimTypes.ID);

        if (!string.IsNullOrEmpty(userId))
        {
            GroupsList = await groupService.GetGroupsByUserId(Guid.Parse(userId));
        }
    }
}
