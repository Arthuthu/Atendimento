@page "/group/{GroupId}"

@inject IGroupService groupService
@inject IUserService userService

<AuthorizeView>
    <Authorized>
        @if (Group is not null)
        {
            <div class="page-div">
                <div class="column-div">
                    <div class="column-header">Grupo</div>
                </div>
                <div class="column-div">
                    <div class="column-cell">
                        @Group.Name
                    </div>
                </div>
                <div class="column-div" style="margin-top: 30px;">
                    <div class="column-header">Usuários</div>
                </div>
                @if (GroupUsers is not null && GroupUsers.Count > 0)
                {
                    @foreach (var user in GroupUsers)
                    {
                        <div class="row-cell">
                            <a class="column-cell">@user.Username</a>
                        </div>
                    }
                }
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? GroupId { get; set; }

    public GroupModel? Group { get; set; }
    public List<UserModel>? GroupUsers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(GroupId))
        {
            Group = await groupService.GetById(new Guid(GroupId));
        }

        if (Group is not null && Group.UsersId is not null && Group.UsersId.Count > 0)
        {
            GroupUsers ??= [];

            foreach (Guid userId in Group.UsersId)
            {
                UserModel? newUser = new();
                newUser = await userService.GetById(userId);

                if (newUser is not null)
                {
                    GroupUsers.Add(newUser);
                }
            }
        }

        await base.OnInitializedAsync();
    }
}
