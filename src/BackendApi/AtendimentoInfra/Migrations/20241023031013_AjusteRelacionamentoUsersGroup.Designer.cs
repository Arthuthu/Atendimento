// <auto-generated />
using System;
using AtendimentoInfra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AtendimentoInfra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241023031013_AjusteRelacionamentoUsersGroup")]
    partial class AjusteRelacionamentoUsersGroup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AtendimentoDomain.Entities.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Versao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Numero");

                    b.HasIndex("UserId");

                    b.ToTable("Atendimento", (string)null);
                });

            modelBuilder.Entity("AtendimentoDomain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("AtendimentoDomain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<Guid>("ParticipatingGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipatingUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParticipatingGroupsId", "ParticipatingUsersId");

                    b.HasIndex("ParticipatingUsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("AtendimentoDomain.Entities.Atendimento", b =>
                {
                    b.HasOne("AtendimentoDomain.Entities.User", "User")
                        .WithMany("Atendimentos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AtendimentoDomain.Entities.Group", b =>
                {
                    b.HasOne("AtendimentoDomain.Entities.User", "OwnerUser")
                        .WithMany("OwnedGroups")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("AtendimentoDomain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtendimentoDomain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipatingUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AtendimentoDomain.Entities.User", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("OwnedGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
